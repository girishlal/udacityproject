--- /opt/conda/lib/python3.6/site-packages/torch/nn/modules/linear.py
+++ /opt/conda/lib/python3.6/site-packages/torch/nn/modules/linear.py
@@ -1,27 +1,22 @@
 class Linear(Module):
-    r"""Applies a linear transformation to the incoming data: :math:`y = xA^T + b`
+    r"""Applies a linear transformation to the incoming data: :math:`y = Ax + b`
 
     Args:
         in_features: size of each input sample
         out_features: size of each output sample
-        bias: If set to ``False``, the layer will not learn an additive bias.
+        bias: If set to False, the layer will not learn an additive bias.
             Default: ``True``
 
     Shape:
-        - Input: :math:`(N, *, H_{in})` where :math:`*` means any number of
-          additional dimensions and :math:`H_{in} = \text{in\_features}`
-        - Output: :math:`(N, *, H_{out})` where all but the last dimension
-          are the same shape as the input and :math:`H_{out} = \text{out\_features}`.
+        - Input: :math:`(N, *, in\_features)` where :math:`*` means any number of
+          additional dimensions
+        - Output: :math:`(N, *, out\_features)` where all but the last dimension
+          are the same shape as the input.
 
     Attributes:
         weight: the learnable weights of the module of shape
-            :math:`(\text{out\_features}, \text{in\_features})`. The values are
-            initialized from :math:`\mathcal{U}(-\sqrt{k}, \sqrt{k})`, where
-            :math:`k = \frac{1}{\text{in\_features}}`
-        bias:   the learnable bias of the module of shape :math:`(\text{out\_features})`.
-                If :attr:`bias` is ``True``, the values are initialized from
-                :math:`\mathcal{U}(-\sqrt{k}, \sqrt{k})` where
-                :math:`k = \frac{1}{\text{in\_features}}`
+            `(out_features x in_features)`
+        bias:   the learnable bias of the module of shape `(out_features)`
 
     Examples::
 
@@ -29,9 +24,7 @@
         >>> input = torch.randn(128, 20)
         >>> output = m(input)
         >>> print(output.size())
-        torch.Size([128, 30])
     """
-    __constants__ = ['bias', 'in_features', 'out_features']
 
     def __init__(self, in_features, out_features, bias=True):
         super(Linear, self).__init__()
@@ -45,11 +38,10 @@
         self.reset_parameters()
 
     def reset_parameters(self):
-        init.kaiming_uniform_(self.weight, a=math.sqrt(5))
+        stdv = 1. / math.sqrt(self.weight.size(1))
+        self.weight.data.uniform_(-stdv, stdv)
         if self.bias is not None:
-            fan_in, _ = init._calculate_fan_in_and_fan_out(self.weight)
-            bound = 1 / math.sqrt(fan_in)
-            init.uniform_(self.bias, -bound, bound)
+            self.bias.data.uniform_(-stdv, stdv)
 
     def forward(self, input):
         return F.linear(input, self.weight, self.bias)